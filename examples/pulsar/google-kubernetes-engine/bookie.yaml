
## Credits to Franck Cuny : https://github.com/fcuny/distributedlog-on-k8s/blob/master/bookkeeper.statefulset.yaml

# SSDs for bookie journal storage
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: bookie-ssd
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd
---
# HDDs for bookie ledger storage
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: bookie-hdd
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-standard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bookie-config
data:
  PULSAR_MEM: "\" -Xms4g -Xmx4g -XX:MaxDirectMemorySize=4g\""
  PULSAR_GC: "\" -XX:+UseG1GC \""
  dbStorage_writeCacheMaxSizeMb: "1024"
  dbStorage_readAheadCacheMaxSizeMb: "1024"
  zkServers: zk-0.zookeeper,zk-1.zookeeper,zk-2.zookeeper
  statsProviderClass: org.apache.bookkeeper.stats.prometheus.PrometheusMetricsProvider
  useHostNameAsBookieID: "true"
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: bookkeeper
  labels:
    app: pulsar
    component: bookkeeper
spec:
  serviceName: bookkeeper
  replicas: 3
  template:
    metadata:
      labels:
        app: pulsar
        component: bookkeeper
        cluster: pulsar-gke
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    spec:
      terminationGracePeriodSeconds: 0
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                        - bookkeeper
                topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: bookie-metaformat
          image: apachepulsar/pulsar:latest
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/bookkeeper.conf &&
              bin/bookkeeper shell metaformat --nonInteractive || true;
          envFrom:
            - configMapRef:
                name: bookie-config
      containers:
        - name: bookie
          image: apachepulsar/pulsar:latest
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/bookkeeper.conf &&
              bin/apply-config-from-env.py conf/pulsar_env.sh &&
              bin/pulsar bookie
          ports:
            - containerPort: 3181
              hostPort: 3181
              name: client
          envFrom:
            - configMapRef:
                name: bookie-config
          volumeMounts:
            - name: journal-disk
              mountPath: /pulsar/data/bookkeeper/journal
            - name: ledgers-disk
              mountPath: /pulsar/data/bookkeeper/ledgers
      initContainers:
        # The first time, initialize BK metadata in zookeeper
        # Otherwise ignore error if it's already there
        - name: bookie-metaformat
          image: apachepulsar/pulsar:latest
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/bookkeeper.conf &&
              bin/bookkeeper shell metaformat --nonInteractive || true;
          envFrom:
            - configMapRef:
                name: bookie-config
  volumeClaimTemplates:
    - metadata:
        name: journal-disk
        annotations:
          volume.alpha.kubernetes.io/storage-class: default
        labels:
          component: bookkeeper
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
        storageClassName: bookie-ssd
    - metadata:
        name: ledger-disk
        annotations:
          volume.alpha.kubernetes.io/storage-class: default
        labels:
          component: bookkeeper
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
        storageClassName: bookie-hdd

---
##
## Run BookKeeper auto-recovery from a different set of containers
## Auto-Recovery makes sure to restore the replication factor when any bookie
## crashes and it's not recovering on its own.
##
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: bookie-autorecovery
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: pulsar
        component: bookkeeper-replication
    spec:
      containers:
        - name: replication-worker
          image: apachepulsar/pulsar:latest
          command: ["sh", "-c"]
          args:
            - >
              bin/apply-config-from-env.py conf/bookkeeper.conf &&
              bin/bookkeeper autorecovery
          envFrom:
            - configMapRef:
                name: bookie-config
          env:
              ## Configure for lower mem usage
            - name: PULSAR_MEM
              value: "\" -Xmx256m \""
            - name: PULSAR_GC
              value: "\"  \""
